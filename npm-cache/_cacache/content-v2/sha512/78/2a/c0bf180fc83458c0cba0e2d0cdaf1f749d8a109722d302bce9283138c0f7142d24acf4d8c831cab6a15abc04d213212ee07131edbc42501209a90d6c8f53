{
  "_id" : "jest-serializer",
  "_rev" : "60-da351ff36212d891a47cc32852cd1941",
  "name" : "jest-serializer",
  "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
  "dist-tags" : {
    "next" : "26.0.0-alpha.0",
    "canary" : "25.2.1-alpha.2",
    "beta" : "24.2.0-alpha.0",
    "latest" : "26.3.0"
  },
  "versions" : {
    "23.0.0-charlie.2" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-charlie.2",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-charlie.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-charlie.2.tgz",
        "shasum" : "21beb06b29441f4b29fda4344c0532db286e7d34"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-charlie.2",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-charlie.2_1526377885284_0.8663631199212989"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "23.0.0-charlie.3" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-charlie.3",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-charlie.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-charlie.3.tgz",
        "shasum" : "ae334ee1d16d827699ce2b18c74aa49b23515027"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-charlie.3",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-charlie.3_1527001137401_0.9183950860672967"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "23.0.0-charlie.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-charlie.0",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-charlie.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-charlie.0.tgz",
        "shasum" : "92aacfe8570c7e529571094f4e45cff6c121ec55"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-charlie.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-charlie.0_1525258576654_0.1426063748611115"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "24.0.0-alpha.16" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.16",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.16.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.16.tgz",
        "shasum" : "e18eb92f538938e0b08312c7283dc04c0fd0ee2e"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.16",
      "gitHead" : "634e5a54f46b2a62d1dc81a170562e6f4e55ad60",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.16_1548423719118_0.32242276791194735"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0.tgz",
        "shasum" : "522c44a332cdd194d8c0531eb06a1ee5afb4256b"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0",
      "gitHead" : "634e5a54f46b2a62d1dc81a170562e6f4e55ad60",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0_1548428694503_0.9860371717949987"
      },
      "_nodeVersion" : "8.11.3"
    },
    "23.0.0-charlie.1" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-charlie.1",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-charlie.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-charlie.1.tgz",
        "shasum" : "c73288c67ed332bc9b80743f0ffe98baa665de08"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-charlie.1",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-charlie.1_1525349414249_0.72585057483884"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "24.0.0-alpha.15" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.15",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.15.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.15.tgz",
        "shasum" : "1ad99732ac271f2b0dc079900d56a5fe5ac299a8"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.15",
      "gitHead" : "28971c5f794330e8acc6861288e6daafcd32238e",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.15_1548352350772_0.11216380156128558"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.12" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.12",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.12.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.12.tgz",
        "shasum" : "44478e6256f9e2b76a24cd56ba49923e33fe5522"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.12",
      "gitHead" : "4f2bcb861d1f0fb150c05970362e52a38c31f67e",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.12_1547218839739_0.1877227588400825"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.13" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.13",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.13.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.13.tgz",
        "shasum" : "eeaebcd8eb2aa7c4374f2ea3933f6bfa720c99bf"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.13",
      "gitHead" : "6de22dde9a10f775adc7b6f80080bdd224f6ae31",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.13_1548256527627_0.12287465289633248"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.10" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.10",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.10.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.10.tgz",
        "shasum" : "997b06aaf622835dfba72465b914a24f9cf8eaca"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.10",
      "gitHead" : "722049ccd66947d48296dcb666bc99fccab86065",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.10_1547053436054_0.20859618426972681"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.11" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.11",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.11.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.11.tgz",
        "shasum" : "b9ca1a19aaa12ed977711ce5fc9ee79f28be0e95"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.11",
      "gitHead" : "6a066c6afe2ae08669a27d3b703a6cf0d898e7b7",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.11_1547145274697_0.6256306406790355"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.9.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.9.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.9.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.9.0.tgz",
        "shasum" : "e6d7d7ef96d31e8b9079a714754c5d5c58288e73"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.15.0/node@v11.12.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "scotthovestadt",
        "email" : "scott.hovestadt@gmail.com"
      },
      "_id" : "jest-serializer@24.9.0",
      "gitHead" : "9ad0f4bc6b8bdd94989804226c28c9960d9da7d1",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.9.0_1565934946280_0.8841378903379862"
      },
      "_nodeVersion" : "11.12.0"
    },
    "24.3.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.3.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.3.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.3.0.tgz",
        "shasum" : "074e307300d1451617cf2630d11543ee4f74a1c8"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.3.0",
      "gitHead" : "3a7a4f3a3f5489ac8e07dcddf76bb949c482ec87",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.3.0_1551963559139_0.7866121466336953"
      },
      "_nodeVersion" : "8.11.3"
    },
    "25.2.0-alpha.86" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.2.0-alpha.86",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.2.0-alpha.86.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.2.0-alpha.86.tgz",
        "shasum" : "0788c178e1dad154b5292d2cc759ca33d127eac3"
      },
      "devDependencies" : {
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.14.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@25.2.0-alpha.86",
      "gitHead" : "cd98198c9397d8b69c55155d7b224d62ef117a90",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.2.0-alpha.86_1585156571470_0.07145274544954616"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {deserialize, serialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "12.14.1"
    },
    "24.4.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.4.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.4.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.4.0.tgz",
        "shasum" : "f70c5918c8ea9235ccb1276d232e459080588db3"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.4.0",
      "gitHead" : "a018000fc162db3cfd0ebf9f23fdb734f05821a6",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.4.0_1552316268589_0.8708675255908567"
      },
      "_nodeVersion" : "8.11.3"
    },
    "25.2.1-alpha.2" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.2.1-alpha.2",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.2.1-alpha.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.2.1-alpha.2.tgz",
        "shasum" : "204e9a28b51278c5d1a793d42381b8d09b7be26a"
      },
      "devDependencies" : {
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.14.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@25.2.1-alpha.2",
      "typesVersions" : {
        "<3.8" : {
          "build/*" : [ "build/ts3.4/*" ]
        }
      },
      "gitHead" : "79b7ab67c63d3708f9689e25fbc0e8b0094bd019",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.2.1-alpha.2_1585210221207_0.729463522188649"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {deserialize, serialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "12.14.1"
    },
    "25.0.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.0.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.0.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.0.0.tgz",
        "shasum" : "689d7c259c578c0f5be7c52f5e5650a7090a4e89"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.16.4/node@v11.12.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "scotthovestadt",
        "email" : "scott.hovestadt@gmail.com"
      },
      "_id" : "jest-serializer@25.0.0",
      "gitHead" : "ff9269be05fd8316e95232198fce3463bf2f270e",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.0.0_1566444224056_0.28170960818304014"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {deserialize, serialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.12.0"
    },
    "25.2.1-alpha.1" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.2.1-alpha.1",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.2.1-alpha.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.2.1-alpha.1.tgz",
        "shasum" : "11fedcbf3e35a4519a87f37f0f582e25fba702f5"
      },
      "devDependencies" : {
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.14.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@25.2.1-alpha.1",
      "typesVersions" : {
        "<3.8" : {
          "*" : [ "ts3.4/*" ]
        }
      },
      "gitHead" : "5cc2ccdacb1b2433581222252e43cb5a1f6861a9",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.2.1-alpha.1_1585209253489_0.394555983320499"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {deserialize, serialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "12.14.1"
    },
    "24.0.0-alpha.9" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.9",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.9.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.9.tgz",
        "shasum" : "ac1da43c39d20f2bdc59991a2b616fd744eaa765"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.9",
      "gitHead" : "c7caa7ba5904d0c61e586694cde5f536639e4afc",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.9_1545229526143_0.11963097909190723"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "25.2.1" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.2.1",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.2.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.2.1.tgz",
        "shasum" : "51727a5fc04256f461abe0fa024a022ba165877a"
      },
      "devDependencies" : {
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.14.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@25.2.1",
      "typesVersions" : {
        "<3.8" : {
          "build/*" : [ "build/ts3.4/*" ]
        }
      },
      "gitHead" : "a679390828b6c30aeaa547d8c4dc9aed6531e357",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.2.1_1585213264087_0.7121570218377196"
      },
      "_nodeVersion" : "12.14.1"
    },
    "24.0.0-alpha.7" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.7",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.7.tgz",
        "shasum" : "b63f2eba8d793785ed0db5739ed6aaa217e42396"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.7",
      "gitHead" : "4954f46708415174c48a58f296a605fbe1244a31",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.7_1544544469391_0.824167683479307"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.10.0"
    },
    "25.1.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.1.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.1.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.1.0.tgz",
        "shasum" : "73096ba90e07d19dec4a0c1dd89c355e2f129e5d"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v10.16.0+x64 (darwin)",
      "_npmUser" : {
        "name" : "davidzilburg",
        "email" : "davidzilburg@gmail.com"
      },
      "_id" : "jest-serializer@25.1.0",
      "gitHead" : "170eee11d03b0ed5c60077982fdbc3bafd403638",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.1.0_1579654784413_0.11933374510003714"
      },
      "_nodeVersion" : "10.16.0"
    },
    "25.2.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.2.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.2.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.2.0.tgz",
        "shasum" : "fd81440a0bd52f3c182ecabc2426c8efb4c0cf41"
      },
      "devDependencies" : {
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.14.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@25.2.0",
      "gitHead" : "9f0339c1c762e39f869f7df63e88470287728b93",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.2.0_1585159074874_0.46820710361699835"
      },
      "_nodeVersion" : "12.14.1"
    },
    "26.0.0-alpha.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "26.0.0-alpha.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 10.14.2"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-26.0.0-alpha.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-26.0.0-alpha.0.tgz",
        "shasum" : "d22fdc37c1667e9ca8376268d58d2e65d6335034"
      },
      "dependencies" : {
        "graceful-fs" : "^4.2.4"
      },
      "devDependencies" : {
        "@types/graceful-fs" : "^4.1.3",
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.16.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@26.0.0-alpha.0",
      "gitHead" : "ba962e7e9669a4a2f723c2536c97462c8ddfff2d",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_26.0.0-alpha.0_1588421571878_0.6562281520373359"
      },
      "_nodeVersion" : "12.16.3"
    },
    "25.2.6" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.2.6",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.2.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.2.6.tgz",
        "shasum" : "3bb4cc14fe0d8358489dbbefbb8a4e708ce039b7"
      },
      "devDependencies" : {
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.14.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@25.2.6",
      "typesVersions" : {
        "<3.8" : {
          "build/*" : [ "build/ts3.4/*" ]
        }
      },
      "gitHead" : "43207b743df164e9e58bd483dd9167b9084da18b",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.2.6_1585823348013_0.7788768402974813"
      },
      "_nodeVersion" : "12.14.1"
    },
    "23.0.0-charlie.4" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-charlie.4",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-charlie.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-charlie.4.tgz",
        "shasum" : "5e75820d789977d4f858a940aa1783583e8bf595"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-charlie.4",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-charlie.4_1527072136329_0.8634631110431525"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "25.5.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "25.5.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 8.3"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-25.5.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-25.5.0.tgz",
        "shasum" : "a993f484e769b4ed54e70e0efdb74007f503072b"
      },
      "dependencies" : {
        "graceful-fs" : "^4.2.4"
      },
      "devDependencies" : {
        "@types/graceful-fs" : "^4.1.3",
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.16.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@25.5.0",
      "typesVersions" : {
        "<3.8" : {
          "build/*" : [ "build/ts3.4/*" ]
        }
      },
      "gitHead" : "ddd73d18adfb982b9b0d94bad7d41c9f78567ca7",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_25.5.0_1588103112413_0.6775678901365392"
      },
      "_nodeVersion" : "12.16.1"
    },
    "24.2.0-alpha.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.2.0-alpha.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.2.0-alpha.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.2.0-alpha.0.tgz",
        "shasum" : "e506f720ee61797231a51c93707ced1cbf14c8be"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.13.1/node@v8.11.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.2.0-alpha.0",
      "gitHead" : "800f2f803d01c8ae194d71b251e4965dd70e5bf2",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.2.0-alpha.0_1551797181947_0.596183985943852"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "22.4.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "22.4.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-22.4.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-22.4.0.tgz",
        "shasum" : "b5d145b98c4b0d2c20ab686609adbb81fe23b566"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@22.4.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_22.4.0_1519128211052_0.21206914541972965"
      },
      "_nodeVersion" : "8.9.1"
    },
    "24.0.0-alpha.1" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.1",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.1.tgz",
        "shasum" : "b686ae3ff9cd1f15ed22b82dffc1f30069f21e66"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.1",
      "gitHead" : "4954f46708415174c48a58f296a605fbe1244a31",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.1_1540222544083_0.274776094504146"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.10.0"
    },
    "24.0.0-alpha.2" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.2",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.2.tgz",
        "shasum" : "adcaa73ef49e56377f7fada19921c300b576e7f9"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.2",
      "gitHead" : "c5e36835cff4b241327db9cf58c8f6f7227ed1f7",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.2_1540464657116_0.23198370791806933"
      },
      "_nodeVersion" : "8.11.3"
    },
    "22.4.3" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "22.4.3",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-22.4.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-22.4.3.tgz",
        "shasum" : "a679b81a7f111e4766235f4f0c46d230ee0f7436"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@22.4.3",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_22.4.3_1521648488316_0.47187571126282135"
      },
      "_nodeVersion" : "8.9.1"
    },
    "24.0.0-alpha.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.0.tgz",
        "shasum" : "ba3931860a32b4d40b7ac7671d902ff46d14fe9b"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.0",
      "gitHead" : "22f67d49ffcce7a5b6d6891438b837b3b26ba9db",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.0_1539951160263_0.0242185466043896"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.10.0"
    },
    "24.0.0-alpha.5" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.5",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.5.tgz",
        "shasum" : "23899c258aedb1220b203b5d5f19af0d359ef29e"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.5",
      "gitHead" : "2c18a53e8ff2437bba5fcb8076b754ac5f79f9f8",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.5_1541769161314_0.2697893533062814"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.6" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.6",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.6.tgz",
        "shasum" : "27d2fee4b1a85698717a30c3ec2ab80767312597"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.6",
      "gitHead" : "49d08403a941e596eda1279c07a1eaf4d4a73dad",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.6_1541785777970_0.013899601487071811"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "24.0.0-alpha.4" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "24.0.0-alpha.4",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git"
      },
      "engines" : {
        "node" : ">= 6"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-24.0.0-alpha.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-24.0.0-alpha.4.tgz",
        "shasum" : "939c31155b95bebc1ef6f76ae34dbf2c06046e52"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "rubennorte",
        "email" : "rubennorte@gmail.com"
      },
      "_id" : "jest-serializer@24.0.0-alpha.4",
      "gitHead" : "e41f0bb257c6652c3100b97a1087f9f812fbea0d",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_24.0.0-alpha.4_1540571590631_0.5116094564178306"
      },
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "8.11.3"
    },
    "23.0.0-alpha.7" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-alpha.7",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-alpha.7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-alpha.7.tgz",
        "shasum" : "d222bc33bb09addf44cc8b3a15089d46a98a90da"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-alpha.7",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-alpha.7_1523991310853_0.9117654396690464"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "26.0.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "26.0.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 10.14.2"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-26.0.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-26.0.0.tgz",
        "shasum" : "f6c521ddb976943b93e662c0d4d79245abec72a3"
      },
      "dependencies" : {
        "graceful-fs" : "^4.2.4"
      },
      "devDependencies" : {
        "@types/graceful-fs" : "^4.1.3",
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.16.3+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@26.0.0",
      "gitHead" : "343532a21f640ac2709c4076eef57e52279542e1",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_26.0.0_1588614776831_0.5095788921459752"
      },
      "_nodeVersion" : "12.16.3"
    },
    "23.0.0-beta.2" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-beta.2",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-beta.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-beta.2.tgz",
        "shasum" : "152b40bea364bc14e936cfe9553451ef309805c0"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-beta.2",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-beta.2_1524777456328_0.07570555065171147"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "26.1.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "26.1.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 10.14.2"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-26.1.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-26.1.0.tgz",
        "shasum" : "72a394531fc9b08e173dc7d297440ac610d95022"
      },
      "dependencies" : {
        "graceful-fs" : "^4.2.4"
      },
      "devDependencies" : {
        "@types/graceful-fs" : "^4.1.3",
        "@types/node" : "*"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.18.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@26.1.0",
      "gitHead" : "817d8b6aca845dd4fcfd7f8316293e69f3a116c5",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_26.1.0_1592925303036_0.4198172144568517"
      },
      "_nodeVersion" : "12.18.1"
    },
    "26.2.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "26.2.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 10.14.2"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-26.2.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-26.2.0.tgz",
        "shasum" : "92dcae5666322410f4bf50211dd749274959ddac"
      },
      "dependencies" : {
        "@types/node" : "*",
        "graceful-fs" : "^4.2.4"
      },
      "devDependencies" : {
        "@types/graceful-fs" : "^4.1.3"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.20.2/node@v12.18.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@26.2.0",
      "gitHead" : "4a716811a309dae135b780a87dc1647b285800eb",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_26.2.0_1596103896732_0.41582848542884054"
      },
      "_nodeVersion" : "12.18.1"
    },
    "26.3.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "26.3.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/facebook/jest.git",
        "directory" : "packages/jest-serializer"
      },
      "engines" : {
        "node" : ">= 10.14.2"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-26.3.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-26.3.0.tgz",
        "shasum" : "1c9d5e1b74d6e5f7e7f9627080fa205d976c33ef"
      },
      "dependencies" : {
        "@types/node" : "*",
        "graceful-fs" : "^4.2.4"
      },
      "devDependencies" : {
        "@types/graceful-fs" : "^4.1.3"
      },
      "license" : "MIT",
      "directories" : {
      },
      "publishConfig" : {
        "access" : "public"
      },
      "_npmVersion" : "lerna/3.22.1/node@v12.18.1+x64 (darwin)",
      "_npmUser" : {
        "name" : "simenb",
        "email" : "sbekkhus91@gmail.com"
      },
      "_id" : "jest-serializer@26.3.0",
      "gitHead" : "3a7e06fe855515a848241bb06a6f6e117847443d",
      "types" : "build/index.d.ts",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_26.3.0_1597059100927_0.9000448122676652"
      },
      "_nodeVersion" : "12.18.1"
    },
    "23.0.0-beta.1" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-beta.1",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-beta.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-beta.1.tgz",
        "shasum" : "9477e40fe5aae17fa0aede803735a6e55812d65f"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-beta.1",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-beta.1_1524325463560_0.03918240663492201"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "23.0.0-beta.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-beta.0",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-beta.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-beta.0.tgz",
        "shasum" : "65aea41ebbfee2a0c3726d092f1bf62911743e2a"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-beta.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-beta.0_1524219036588_0.7046913602223415"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "23.0.1" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.1",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.1.tgz",
        "shasum" : "a3776aeb311e90fe83fab9e533e85102bd164165"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.1",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.1_1527435049912_0.14910529546950668"
      }
    },
    "23.0.0" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0.tgz",
        "shasum" : "263411ac92e1e3dde243858642bb04e8a986e8ca"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0_1527182782512_0.5808479784969345"
      }
    },
    "23.0.0-beta.3r" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-beta.3r",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-beta.3r.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-beta.3r.tgz",
        "shasum" : "714882d6864a3e1c8ae87f2a8992eea836cf9c29"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-beta.3r",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-beta.3r_1525094092934_0.11072037441345661"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    },
    "23.0.0-alpha.3r" : {
      "name" : "jest-serializer",
      "description" : "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
      "version" : "23.0.0-alpha.3r",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/facebook/jest.git"
      },
      "main" : "build/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/jest-serializer/-/jest-serializer-23.0.0-alpha.3r.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fjest-serializer%2F-%2Fjest-serializer-23.0.0-alpha.3r.tgz",
        "shasum" : "88ef600b1591c0f007d5d65870174b7b7528b6aa"
      },
      "license" : "MIT",
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mjesun",
        "email" : "mjesun@hotmail.com"
      },
      "_id" : "jest-serializer@23.0.0-alpha.3r",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/jest-serializer_23.0.0-alpha.3r_1525093811827_0.6800508842281319"
      },
      "readmeFilename" : "README.md",
      "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By\ndefault, the `v8` implementations are used, but if not present, it defaults to\n`JSON` implementation. Both serializers have the advantage of being able to\nserialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it\nthrough a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in\nmemory. This is useful when willing to transfer over HTTP, TCP or via UNIX\npipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve\nit back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n"
    }
  },
  "readme" : "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {deserialize, serialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "time" : {
    "23.0.0-charlie.2" : "2018-05-15T09:51:25.446Z",
    "23.0.0-charlie.3" : "2018-05-22T14:58:57.510Z",
    "23.0.0-charlie.0" : "2018-05-02T10:56:16.770Z",
    "24.0.0" : "2019-01-25T15:04:54.669Z",
    "23.0.0-charlie.1" : "2018-05-03T12:10:14.319Z",
    "24.4.0" : "2019-03-11T14:57:48.711Z",
    "25.0.0" : "2019-08-22T03:23:44.144Z",
    "24.0.0-alpha.9" : "2018-12-19T14:25:26.320Z",
    "25.2.1" : "2020-03-26T09:01:04.272Z",
    "modified" : "2020-08-10T11:31:43.877Z",
    "24.0.0-alpha.7" : "2018-12-11T16:07:49.579Z",
    "25.2.0" : "2020-03-25T17:57:55.003Z",
    "25.2.6" : "2020-04-02T10:29:08.149Z",
    "23.0.0-charlie.4" : "2018-05-23T10:42:16.459Z",
    "24.2.0-alpha.0" : "2019-03-05T14:46:22.110Z",
    "24.0.0-alpha.1" : "2018-10-22T15:35:44.233Z",
    "24.0.0-alpha.2" : "2018-10-25T10:50:57.304Z",
    "24.0.0-alpha.0" : "2018-10-19T12:12:40.370Z",
    "24.0.0-alpha.5" : "2018-11-09T13:12:41.450Z",
    "24.0.0-alpha.6" : "2018-11-09T17:49:38.079Z",
    "created" : "2018-02-20T12:03:31.051Z",
    "24.0.0-alpha.4" : "2018-10-26T16:33:10.800Z",
    "23.0.0-alpha.7" : "2018-04-17T18:55:10.917Z",
    "26.0.0" : "2020-05-04T17:52:56.958Z",
    "26.2.0" : "2020-07-30T10:11:36.858Z",
    "23.0.0-beta.3r" : "2018-04-30T13:14:53.078Z",
    "24.0.0-alpha.16" : "2019-01-25T13:41:59.212Z",
    "24.0.0-alpha.15" : "2019-01-24T17:52:31.004Z",
    "24.0.0-alpha.12" : "2019-01-11T15:00:39.837Z",
    "24.0.0-alpha.13" : "2019-01-23T15:15:27.729Z",
    "24.0.0-alpha.10" : "2019-01-09T17:03:56.255Z",
    "24.0.0-alpha.11" : "2019-01-10T18:34:34.788Z",
    "24.9.0" : "2019-08-16T05:55:46.480Z",
    "24.3.0" : "2019-03-07T12:59:19.260Z",
    "25.2.0-alpha.86" : "2020-03-25T17:16:11.577Z",
    "25.2.1-alpha.2" : "2020-03-26T08:10:21.390Z",
    "25.2.1-alpha.1" : "2020-03-26T07:54:13.589Z",
    "25.1.0" : "2020-01-22T00:59:44.561Z",
    "26.0.0-alpha.0" : "2020-05-02T12:12:51.988Z",
    "25.5.0" : "2020-04-28T19:45:12.778Z",
    "22.4.0" : "2018-02-20T12:03:31.268Z",
    "22.4.3" : "2018-03-21T16:08:08.386Z",
    "23.0.0-beta.2" : "2018-04-26T21:17:36.400Z",
    "26.1.0" : "2020-06-23T15:15:03.243Z",
    "26.3.0" : "2020-08-10T11:31:41.092Z",
    "23.0.0-beta.1" : "2018-04-21T15:44:23.610Z",
    "23.0.0-beta.0" : "2018-04-20T10:10:36.896Z",
    "23.0.1" : "2018-05-27T15:30:50.111Z",
    "23.0.0" : "2018-05-24T17:26:22.735Z",
    "23.0.0-alpha.3r" : "2018-04-30T13:10:11.923Z"
  },
  "repository" : {
    "type" : "git",
    "url" : "git+https://github.com/facebook/jest.git",
    "directory" : "packages/jest-serializer"
  },
  "users" : {
  },
  "readmeFilename" : "README.md",
  "license" : "MIT"
}